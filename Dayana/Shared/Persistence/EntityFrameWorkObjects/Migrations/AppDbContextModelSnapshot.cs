// <auto-generated />
using System;
using Dayana.Shared.Persistence.EntityFrameWorkObjects;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dayana.Shared.Persistence.EntityFrameWorkObjects.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.BlogPosts.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostBody")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("PostWriterId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostCategoryId");

                    b.HasIndex("PostWriterId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.BlogPosts.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CategoryIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategorySubject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PostCategories");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostCategoryComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<int>("PostCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyToCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentOwnerId");

                    b.HasIndex("PostCategoryId");

                    b.ToTable("PostCategoryComments");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostCategoryIssueComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<int>("PostCategoryIssueId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyToCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentOwnerId");

                    b.HasIndex("PostCategoryIssueId");

                    b.ToTable("PostCategoryIssueComments");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyToCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentOwnerId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostIssueComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsReply")
                        .HasColumnType("bit");

                    b.Property<int>("PostIssueId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyToCommentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentOwnerId");

                    b.HasIndex("PostIssueId");

                    b.ToTable("PostIssueComments");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Issues.PostCategoryIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<string>("IssueTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IssueWriterId")
                        .HasColumnType("int");

                    b.Property<int>("PostCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IssueWriterId");

                    b.HasIndex("PostCategoryId");

                    b.ToTable("PostCategoryIssues");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Issues.PostIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssueDescription")
                        .IsRequired()
                        .HasMaxLength(900)
                        .HasColumnType("nvarchar(900)");

                    b.Property<string>("IssueTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IssueWriterId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IssueWriterId");

                    b.HasIndex("PostId");

                    b.ToTable("PostIssues");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Claims.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Permissions.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7873),
                            Name = "UserManagement",
                            Title = "مدیریت کاربران",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7882),
                            Value = "identity.users.command"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7935),
                            Name = "RoleManagement",
                            Title = "مدیریت نقش‌ها",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7937),
                            Value = "identity.roles.command"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7940),
                            Name = "ClaimManagement",
                            Title = "مدیریت دسترسی ها",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7941),
                            Value = "identity.claims.command"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7944),
                            Name = "UserView",
                            Title = "نمایش  مدیریت کاربران",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7946),
                            Value = "identity.users.query"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7948),
                            Name = "RoleView",
                            Title = "نمایش  مدیریت نقش ها",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7950),
                            Value = "identity.roles.query"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7957),
                            Name = "ClaimView",
                            Title = "نمایش  مدیریت دسترسی ها",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7959),
                            Value = "identity.claims.query"
                        });
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 756, DateTimeKind.Local).AddTicks(8705),
                            Title = "Owner",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 756, DateTimeKind.Local).AddTicks(8707)
                        });
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Roles.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            PermissionId = 1,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8101),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8107)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 2,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8115),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8117)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 3,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8119),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8121)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 4,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8123),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8124)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 5,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8127),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8128)
                        },
                        new
                        {
                            RoleId = 1,
                            PermissionId = 6,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8132),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(8133)
                        });
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("FailedLoginCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMobileConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastPasswordChangeTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LockoutEndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("SecurityStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nchar(32)")
                        .IsFixedLength();

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "R39GYAPIKORIPOKG8L6R1KMECSC3CWMK",
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7114),
                            Email = "mohammadJavadtabari1024@outlook.com",
                            FailedLoginCount = 0,
                            IsEmailConfirmed = false,
                            IsLockedOut = false,
                            IsMobileConfirmed = false,
                            LastPasswordChangeTime = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7081),
                            Mobile = "09301724389",
                            PasswordHash = "48aTafGU/DC+ylVk3JsHwisOeAzzJDgAAqp2NfWX52g=.WB/XFLuttZTZUIok3Z7luQ==",
                            SecurityStamp = "NF7R71AGHML1WJVCIJLZAVY7MIW074PT",
                            State = "Active",
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 766, DateTimeKind.Local).AddTicks(7116),
                            Username = "Illegible_Owner"
                        });
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Users.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            CreatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 756, DateTimeKind.Local).AddTicks(8628),
                            Id = 0,
                            UpdatedAt = new DateTime(2022, 8, 20, 10, 30, 47, 756, DateTimeKind.Local).AddTicks(8670)
                        });
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.BlogPosts.Post", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Blog.BlogPosts.PostCategory", "PostCategory")
                        .WithMany("CategoryPosts")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "PostWriter")
                        .WithMany("UserPosts")
                        .HasForeignKey("PostWriterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PostCategory");

                    b.Navigation("PostWriter");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostCategoryComment", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "CommentOwner")
                        .WithMany("PostCategoryComments")
                        .HasForeignKey("CommentOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Blog.BlogPosts.PostCategory", "PostCategory")
                        .WithMany("PostCategoryComments")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentOwner");

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostCategoryIssueComment", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "CommentOwner")
                        .WithMany("PostCategoryIssueComments")
                        .HasForeignKey("CommentOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Blog.Issues.PostCategoryIssue", "PostCategoryIssue")
                        .WithMany("PostCategoryIssueComments")
                        .HasForeignKey("PostCategoryIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentOwner");

                    b.Navigation("PostCategoryIssue");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostComment", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "CommentOwner")
                        .WithMany("PostComments")
                        .HasForeignKey("CommentOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Blog.BlogPosts.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentOwner");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Comments.PostIssueComment", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "CommentOwner")
                        .WithMany("PostIssueComments")
                        .HasForeignKey("CommentOwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Blog.Issues.PostIssue", "PostIssue")
                        .WithMany("PostIssueComments")
                        .HasForeignKey("PostIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentOwner");

                    b.Navigation("PostIssue");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Issues.PostCategoryIssue", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "IssueWriter")
                        .WithMany("PostCategoryIssues")
                        .HasForeignKey("IssueWriterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Blog.BlogPosts.PostCategory", "PostCategory")
                        .WithMany("PostCategoryIssues")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueWriter");

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Issues.PostIssue", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "IssueWriter")
                        .WithMany("PostIssues")
                        .HasForeignKey("IssueWriterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Blog.BlogPosts.Post", "Post")
                        .WithMany("PostIssues")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IssueWriter");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Claims.Claim", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Roles.RolePermission", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Permissions.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Identity.Roles.Role", "Role")
                        .WithMany("RolePermission")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Users.UserRole", b =>
                {
                    b.HasOne("Dayana.Shared.Domains.Identity.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Dayana.Shared.Domains.Identity.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.BlogPosts.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostIssues");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.BlogPosts.PostCategory", b =>
                {
                    b.Navigation("CategoryPosts");

                    b.Navigation("PostCategoryComments");

                    b.Navigation("PostCategoryIssues");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Issues.PostCategoryIssue", b =>
                {
                    b.Navigation("PostCategoryIssueComments");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Blog.Issues.PostIssue", b =>
                {
                    b.Navigation("PostIssueComments");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Permissions.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Roles.Role", b =>
                {
                    b.Navigation("RolePermission");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Dayana.Shared.Domains.Identity.Users.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("PostCategoryComments");

                    b.Navigation("PostCategoryIssueComments");

                    b.Navigation("PostCategoryIssues");

                    b.Navigation("PostComments");

                    b.Navigation("PostIssueComments");

                    b.Navigation("PostIssues");

                    b.Navigation("UserPosts");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
